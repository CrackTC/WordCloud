name: Build native library

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  build-native-common:
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} native

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: libwordcloud-${{ matrix.os }}
        path: |
          ${{github.workspace}}/build/Release/wordcloud.dll
          ${{github.workspace}}/build/libwordcloud.so
          ${{github.workspace}}/build/libwordcloud.dylib
        if-no-files-found: error

  build-native-alpine:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup alpine
      uses: jirutka/setup-alpine@v1
      with:
        packages: >
          cmake
          build-base

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} native
      shell: alpine.sh {0}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      shell: alpine.sh {0}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: libwordcloud-alpine
        path: |
          ${{github.workspace}}/build/libwordcloud.so
        if-no-files-found: error

  nuget:
    runs-on: ubuntu-latest
    needs:
      - build-native-common
      - build-native-alpine

    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: native

      - name: Dotnet pack
        run: |
          cd ./src
          dotnet build -c Release
          dotnet pack -c Release

      - name: Add private GitHub registry to NuGet
        run: |
          dotnet nuget add source --username CrackTC --password ${{ secrets.PAT }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/CrackTC/index.json"

      - name: Push package
        run: |
          dotnet nuget push ./src/bin/Release/*.nupkg --source "github" --api-key ${{ secrets.PAT }}
          dotnet nuget push ./src/bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGETAPIKEY }}
