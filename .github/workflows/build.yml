# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-native:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} native

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: libwordcloud-${{ matrix.os }}
        path: |
          ${{github.workspace}}/build/Release/wordcloud.dll
          ${{github.workspace}}/build/libwordcloud.so
          ${{github.workspace}}/build/libwordcloud.dylib
        if-no-files-found: error

  nuget:
    runs-on: ubuntu-latest
    needs: build-native

    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: native
          merge-multiple: true

      - name: Dotnet pack
        run: |
          cd ./src
          dotnet build -c Release
          dotnet pack -c Release

      - name: Setup nuget
        uses: nuget/setup-nuget@v2
        with:
          nuget-version: '5.x'

      - name: Add private GitHub registry to NuGet
        run: |
          dotnet nuget add source --username CrackTC --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/CrackTC/index.json"

      - name: Push package
        run: |
          dotnet nuget push ./src/bin/Release/*.nupkg --source "github" --api-key ${{ secrets.PAT }}
          dotnet nuget push ./src/bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{ secrets.NUGETAPIKEY }}
